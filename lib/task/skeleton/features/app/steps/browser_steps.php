<?php

/*
 * IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
 * It is recommended to regenerate this file in the future when you upgrade to a 
 * newer version of cucumber-rails. Consider adding your own code to a new file 
 * instead of editing this one. Cucumber will automatically load all features/steps/???.php files.
 */

/*
 * This file is part of the sfBehatPlugin package.
 * (c) 2010 Konstantin Kudryashov <ever.zet@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

$steps->Given('/^I am on(?: the)? (.*)$/', function($page) use($world) {
    $world->browser->get($world->guessPath($page));
});

$steps->Given('/^I go to(?: the)? (.*)$/', function($page) use($world) {
    $world->browser->get($world->guessPath($page));
});

$steps->Given('/I (?:follow|click)(?: the)? "([^"]*)"(?: link)*/', function($link) use($world) {
    $world->browser->click($link);
});

$steps->When('/^I follow redirect$/', function() use($world) {
    $world->browser->followRedirect();
});

$steps->When('/^I fill in "([^"]*)" with "([^"]*)"$/', function($fld, $val) use($world) {
    $world->form[$fld] = $val;
});

$steps->When('/^I select "([^"]*)" from "([^"]*)"$/', function($val, $fld) use($world) {
    $world->form[$fld] = $val;
});

$steps->When('/^I check "([^"]*)"$/', function($fld) use($world) {
    $world->form[$fld] = true;
});

$steps->When('/^I uncheck "([^"]*)"$/', function($fld) use($world) {
    $world->form[$fld] = false;
});

$steps->When('/^I attach the file at "([^"]*)" to "([^"]*)"$/', function($path, $fld) use($world) {
    $world->form[$fld] = $path;
});

$steps->When('/^I press "([^"]*)"$/', function($button) use($world) {
    $world->browser->click($button, $world->form);
    $world->form = array();
});

$steps->Then('/^Cookie "([^"]*)" was set to "([^"]*)"$/', function($name, $value) use($world) {
    $isSet = false;

    foreach ($world->getResponse()->getCookies() as $cookie) {
        if ($name == $cookie['name'] && $value == $cookie['value']) {
            $isSet = true;
        }
    }

    assertTrue($isSet);
});

$steps->Then('/^Cookie "([^"]*)" was not set to "([^"]*)"$/', function($name, $value) use($world) {
    $isSet = false;

    foreach ($world->getResponse()->getCookies() as $cookie) {
        if ($name == $cookie['name'] && $value == $cookie['value']) {
            $isSet = true;
        }
    }

    assertFalse($isSet);
});

$steps->Then('/^Header "([^"]*)" is set to "([^"]*)"$/', function($key, $value) use($world) {
    assertEquals($value, $world->getResponse()->getHttpHeader($key));
});

$steps->Then('/^Header "([^"]*)" is not set to "([^"]*)"$/', function($key, $value) use($world) {
    assertNotEquals($value, $world->getResponse()->getHttpHeader($key));
});

$steps->Then('/^Response status code is (\d+)$/', function($code) use($world) {
    assertEquals($code, $world->getResponse()->getStatuscode());
});

$steps->Then('/^Response status code is not (\d+)$/', function($code) use($world) {
    assertNotEquals($code, $world->getResponse()->getStatuscode());
});

$steps->Then('/^I was redirected$/', function($key, $value) use($world) {
    assertNotNull($world->getResponse()->getHttpHeader('location'));
});

$steps->Then('/^I was not redirected$/', function($key, $value) use($world) {
    assertNull($world->getResponse()->getHttpHeader('location'));
});

$steps->Then('/^I should see "([^"]*)"$/', function($text) use($world) {
    assertRegExp("/$text/", $world->getResponse()->getContent());
});

$steps->Then('/^I should not see "([^"]*)"$/', function($text) use($world) {
    assertNotRegExp("/$text/", $world->getResponse()->getContent());
});
